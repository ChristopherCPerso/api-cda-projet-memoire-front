name: Build and Deploy to Infomaniak

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Récupérer le code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Étape 2 : Configurer Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # Étape 3 : Installer les dépendances
      - name: Install Dependencies
        run: npm ci

      # Étape 4 : Build
      - name: Build Application
        run: npm run build

      - name: Check build files
        run: |
          echo "pwd:" && pwd
          echo "Root:" && ls -la
          echo "build/:" && ls -la build || true
          echo "build/client:" && ls -la build/client || true
          echo "build/server:" && ls -la build/server || true
          echo "server.js exists?"; [ -f server.js ] && echo yes || echo no
          echo "package.json exists?"; [ -f package.json ] && echo yes || echo no
          echo "package-lock.json exists?"; [ -f package-lock.json ] && echo yes || echo no

      - name: Check build size
        run: du -sh build/ || true

      # Étape 5 : Copier les fichiers buildés sur le serveur
      - name: Copy production files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          source: build/client/*,build/server/*,server.js,package.json,package-lock.json
          target: ${{ secrets.SERVER_PATH }}
          strip_components: 0
          overwrite: true
          timeout: 120s
          command_timeout: 20m
          debug: true

      # Étape 6 : Configurer et relancer l'app avec PM2
      - name: Configure and Restart Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            cd ${{ secrets.SERVER_PATH }}
            ls -al
            # Créer le .env avec le secret GitHub
            echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" > .env
            echo ".env file created successfully"

            # Installer les dépendances (prod uniquement)
            npm install --omit=dev

            # Redémarrer via PM2
            echo "Restarting PM2 process..."
            pm2 restart frontdvisor --update-env || pm2 start "npm run start" --name "frontdvisor"
            pm2 save
            echo "Deployment finished!"
